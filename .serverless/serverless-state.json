{
  "service": {
    "service": "sweatworks",
    "serviceObject": {
      "name": "sweatworks"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "lambdaHashingVersion": "20201221",
      "memorySize": 128,
      "timeout": 30,
      "stage": "dev",
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetAllAuthorsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sweatworks-dev-getAllAuthors"
            }
          },
          "GetOneAuthorLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sweatworks-dev-getOneAuthor"
            }
          },
          "CreateAuthorLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sweatworks-dev-createAuthor"
            }
          },
          "UpdateAuthorLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sweatworks-dev-updateAuthor"
            }
          },
          "DeleteOneAuthorLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sweatworks-dev-deleteOneAuthor"
            }
          },
          "GetFiltersPublicationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sweatworks-dev-getFiltersPublications"
            }
          },
          "GetAllPublicationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sweatworks-dev-getAllPublications"
            }
          },
          "GetOnePublicationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sweatworks-dev-getOnePublication"
            }
          },
          "CreatePublicationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sweatworks-dev-createPublication"
            }
          },
          "UpdatePublicationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sweatworks-dev-updatePublication"
            }
          },
          "DeleteOnePublicationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sweatworks-dev-deleteOnePublication"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "sweatworks",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sweatworks-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sweatworks-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "sweatworks",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": "arn:aws:iam::802587217904:root"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {
                      "StringEquals": {
                        "sts:ExternalId": "ServerlessEnterprise-512d35c4-ed21-4f30-bad8-ed1d8cfa6a00"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "LogFilterAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:FilterLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "GetAllAuthorsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetOneAuthorLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CreateAuthorLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateAuthorLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteOneAuthorLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetFiltersPublicationsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetAllPublicationsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "GetOnePublicationLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CreatePublicationLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdatePublicationLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteOnePublicationLogGroup",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "GetAllAuthorsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sweatworks/dev/1618498481834-2021-04-15T14:54:41.834Z/sweatworks.zip"
              },
              "Handler": "s_getAllAuthors.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "sweatworks-dev-getAllAuthors",
              "MemorySize": 128,
              "Timeout": 30,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllAuthorsLogGroup"
            ]
          },
          "GetOneAuthorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sweatworks/dev/1618498481834-2021-04-15T14:54:41.834Z/sweatworks.zip"
              },
              "Handler": "s_getOneAuthor.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "sweatworks-dev-getOneAuthor",
              "MemorySize": 128,
              "Timeout": 30,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOneAuthorLogGroup"
            ]
          },
          "CreateAuthorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sweatworks/dev/1618498481834-2021-04-15T14:54:41.834Z/sweatworks.zip"
              },
              "Handler": "s_createAuthor.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "sweatworks-dev-createAuthor",
              "MemorySize": 128,
              "Timeout": 30,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateAuthorLogGroup"
            ]
          },
          "UpdateAuthorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sweatworks/dev/1618498481834-2021-04-15T14:54:41.834Z/sweatworks.zip"
              },
              "Handler": "s_updateAuthor.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "sweatworks-dev-updateAuthor",
              "MemorySize": 128,
              "Timeout": 30,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateAuthorLogGroup"
            ]
          },
          "DeleteOneAuthorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sweatworks/dev/1618498481834-2021-04-15T14:54:41.834Z/sweatworks.zip"
              },
              "Handler": "s_deleteOneAuthor.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "sweatworks-dev-deleteOneAuthor",
              "MemorySize": 128,
              "Timeout": 30,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteOneAuthorLogGroup"
            ]
          },
          "GetFiltersPublicationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sweatworks/dev/1618498481834-2021-04-15T14:54:41.834Z/sweatworks.zip"
              },
              "Handler": "s_getFiltersPublications.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "sweatworks-dev-getFiltersPublications",
              "MemorySize": 128,
              "Timeout": 30,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFiltersPublicationsLogGroup"
            ]
          },
          "GetAllPublicationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sweatworks/dev/1618498481834-2021-04-15T14:54:41.834Z/sweatworks.zip"
              },
              "Handler": "s_getAllPublications.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "sweatworks-dev-getAllPublications",
              "MemorySize": 128,
              "Timeout": 30,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllPublicationsLogGroup"
            ]
          },
          "GetOnePublicationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sweatworks/dev/1618498481834-2021-04-15T14:54:41.834Z/sweatworks.zip"
              },
              "Handler": "s_getOnePublication.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "sweatworks-dev-getOnePublication",
              "MemorySize": 128,
              "Timeout": 30,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOnePublicationLogGroup"
            ]
          },
          "CreatePublicationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sweatworks/dev/1618498481834-2021-04-15T14:54:41.834Z/sweatworks.zip"
              },
              "Handler": "s_createPublication.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "sweatworks-dev-createPublication",
              "MemorySize": 128,
              "Timeout": 30,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreatePublicationLogGroup"
            ]
          },
          "UpdatePublicationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sweatworks/dev/1618498481834-2021-04-15T14:54:41.834Z/sweatworks.zip"
              },
              "Handler": "s_updatePublication.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "sweatworks-dev-updatePublication",
              "MemorySize": 128,
              "Timeout": 30,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdatePublicationLogGroup"
            ]
          },
          "DeleteOnePublicationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sweatworks/dev/1618498481834-2021-04-15T14:54:41.834Z/sweatworks.zip"
              },
              "Handler": "s_deleteOnePublication.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "sweatworks-dev-deleteOnePublication",
              "MemorySize": 128,
              "Timeout": 30,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteOnePublicationLogGroup"
            ]
          },
          "GetAllAuthorsLambdaVersionWffsRnEZ6pCkh3P0uRPKL06KaABirCl3RhDZv4TU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllAuthorsLambdaFunction"
              },
              "CodeSha256": "Ud3CdaaRHPCeBHF98mKbzEMJF8/xrZqdJ5CuUHMYpQE="
            }
          },
          "GetOneAuthorLambdaVersiony5FbNQymZF4TreUF7VaQMajNZC7Ti6i3OqOvVHki2nc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOneAuthorLambdaFunction"
              },
              "CodeSha256": "Ud3CdaaRHPCeBHF98mKbzEMJF8/xrZqdJ5CuUHMYpQE="
            }
          },
          "CreateAuthorLambdaVersiondlUNsTb9SBPjECFwFtwbR4hZwuXeGcvMTzoajGUZhd4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateAuthorLambdaFunction"
              },
              "CodeSha256": "Ud3CdaaRHPCeBHF98mKbzEMJF8/xrZqdJ5CuUHMYpQE="
            }
          },
          "UpdateAuthorLambdaVersioncM1mZYi1EnOAxv1cyLshr50dictB8Jke2WB0Klos": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateAuthorLambdaFunction"
              },
              "CodeSha256": "Ud3CdaaRHPCeBHF98mKbzEMJF8/xrZqdJ5CuUHMYpQE="
            }
          },
          "DeleteOneAuthorLambdaVersionCfKzhGxQipK9jbklLEkSUaUX8hRphxMLptMIjtBe4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteOneAuthorLambdaFunction"
              },
              "CodeSha256": "Ud3CdaaRHPCeBHF98mKbzEMJF8/xrZqdJ5CuUHMYpQE="
            }
          },
          "GetFiltersPublicationsLambdaVersionuTnHt6bzwKrgRsK6ktO0ZryEkwZt8uuDTTWFSTd2Sw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFiltersPublicationsLambdaFunction"
              },
              "CodeSha256": "Ud3CdaaRHPCeBHF98mKbzEMJF8/xrZqdJ5CuUHMYpQE="
            }
          },
          "GetAllPublicationsLambdaVersionn9NzTZKJLUM2QQ6jNCkJI98rU42GOjaSHxJwFkMNw0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllPublicationsLambdaFunction"
              },
              "CodeSha256": "Ud3CdaaRHPCeBHF98mKbzEMJF8/xrZqdJ5CuUHMYpQE="
            }
          },
          "GetOnePublicationLambdaVersionXYInSxq3Wy7VZZJHCBQtAWBEFFPTV11eFEDyEGsNg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOnePublicationLambdaFunction"
              },
              "CodeSha256": "Ud3CdaaRHPCeBHF98mKbzEMJF8/xrZqdJ5CuUHMYpQE="
            }
          },
          "CreatePublicationLambdaVersionZPBDZSChr5Fq3zYluTlmbZ8A1Y19vjKnykFLfM4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatePublicationLambdaFunction"
              },
              "CodeSha256": "Ud3CdaaRHPCeBHF98mKbzEMJF8/xrZqdJ5CuUHMYpQE="
            }
          },
          "UpdatePublicationLambdaVersiong6GlrxZ7QxGfV3mPeKaClgpF2VfPYAhQDVQnj5f55Uk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdatePublicationLambdaFunction"
              },
              "CodeSha256": "Ud3CdaaRHPCeBHF98mKbzEMJF8/xrZqdJ5CuUHMYpQE="
            }
          },
          "DeleteOnePublicationLambdaVersionos2WbpaPbSA1z17UHNgaRdRqEC6YOMMmEwjv34EE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteOnePublicationLambdaFunction"
              },
              "CodeSha256": "Ud3CdaaRHPCeBHF98mKbzEMJF8/xrZqdJ5CuUHMYpQE="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-sweatworks",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceAuthors": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "authors",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthorsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuthors"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePublications": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "publications",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePublicationsFilters": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePublications"
              },
              "PathPart": "filters",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePublicationsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePublications"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthorsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'*'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthors"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthorsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'*'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthorsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPublicationsFiltersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'*'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublicationsFilters"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPublicationsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'*'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublications"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPublicationsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'*'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublicationsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthorsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthors"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllAuthorsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAuthorsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthorsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetOneAuthorLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAuthorsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthors"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateAuthorLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAuthorsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthorsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateAuthorLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodAuthorsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthorsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteOneAuthorLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPublicationsFiltersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublicationsFilters"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFiltersPublicationsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPublicationsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublications"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllPublicationsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPublicationsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublicationsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetOnePublicationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPublicationsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublications"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreatePublicationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPublicationsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublicationsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdatePublicationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodPublicationsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePublicationsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteOnePublicationLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1618498451233": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAuthorsOptions",
              "ApiGatewayMethodAuthorsIdVarOptions",
              "ApiGatewayMethodPublicationsFiltersOptions",
              "ApiGatewayMethodPublicationsOptions",
              "ApiGatewayMethodPublicationsIdVarOptions",
              "ApiGatewayMethodAuthorsGet",
              "ApiGatewayMethodAuthorsIdVarGet",
              "ApiGatewayMethodAuthorsPost",
              "ApiGatewayMethodAuthorsIdVarPut",
              "ApiGatewayMethodAuthorsIdVarDelete",
              "ApiGatewayMethodPublicationsFiltersGet",
              "ApiGatewayMethodPublicationsGet",
              "ApiGatewayMethodPublicationsIdVarGet",
              "ApiGatewayMethodPublicationsPost",
              "ApiGatewayMethodPublicationsIdVarPut",
              "ApiGatewayMethodPublicationsIdVarDelete"
            ]
          },
          "GetAllAuthorsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllAuthorsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetOneAuthorLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOneAuthorLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateAuthorLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateAuthorLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateAuthorLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateAuthorLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteOneAuthorLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteOneAuthorLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetFiltersPublicationsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFiltersPublicationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllPublicationsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllPublicationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetOnePublicationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOnePublicationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreatePublicationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatePublicationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdatePublicationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdatePublicationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteOnePublicationLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteOnePublicationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/api-gateway/sweatworks-dev"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "sweatworks",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sweatworks/dev/1618498481834-2021-04-15T14:54:41.834Z/custom-resources.zip"
              },
              "FunctionName": "sweatworks-dev-custom-resource-apigw-cw-role",
              "Handler": "apiGatewayCloudWatchRole/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs12.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "CloudWatchLogsSubscriptionFilterGetAllAuthorsLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:512d35c4-ed21-4f30-bad8-ed1d8cfa6a00#ZXPrHH8zncLfVLcKHB#sweatworks#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetAllAuthorsLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterGetOneAuthorLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:512d35c4-ed21-4f30-bad8-ed1d8cfa6a00#ZXPrHH8zncLfVLcKHB#sweatworks#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetOneAuthorLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterCreateAuthorLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:512d35c4-ed21-4f30-bad8-ed1d8cfa6a00#ZXPrHH8zncLfVLcKHB#sweatworks#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreateAuthorLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterUpdateAuthorLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:512d35c4-ed21-4f30-bad8-ed1d8cfa6a00#ZXPrHH8zncLfVLcKHB#sweatworks#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdateAuthorLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterDeleteOneAuthorLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:512d35c4-ed21-4f30-bad8-ed1d8cfa6a00#ZXPrHH8zncLfVLcKHB#sweatworks#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteOneAuthorLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterGetFiltersPublicationsLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:512d35c4-ed21-4f30-bad8-ed1d8cfa6a00#ZXPrHH8zncLfVLcKHB#sweatworks#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetFiltersPublicationsLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterGetAllPublicationsLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:512d35c4-ed21-4f30-bad8-ed1d8cfa6a00#ZXPrHH8zncLfVLcKHB#sweatworks#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetAllPublicationsLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterGetOnePublicationLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:512d35c4-ed21-4f30-bad8-ed1d8cfa6a00#ZXPrHH8zncLfVLcKHB#sweatworks#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "GetOnePublicationLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterCreatePublicationLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:512d35c4-ed21-4f30-bad8-ed1d8cfa6a00#ZXPrHH8zncLfVLcKHB#sweatworks#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreatePublicationLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterUpdatePublicationLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:512d35c4-ed21-4f30-bad8-ed1d8cfa6a00#ZXPrHH8zncLfVLcKHB#sweatworks#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdatePublicationLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterDeleteOnePublicationLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:512d35c4-ed21-4f30-bad8-ed1d8cfa6a00#ZXPrHH8zncLfVLcKHB#sweatworks#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteOnePublicationLogGroup"
              }
            }
          },
          "CloudWatchLogsSubscriptionFilterApiGatewayLogGroup": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:512d35c4-ed21-4f30-bad8-ed1d8cfa6a00#ZXPrHH8zncLfVLcKHB#sweatworks#dev",
              "FilterPattern": "\"SLS_ACCESS_LOG\"",
              "LogGroupName": {
                "Ref": "ApiGatewayLogGroup"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Value": {
              "Fn::GetAtt": [
                "EnterpriseLogAccessIamRole",
                "Arn"
              ]
            }
          },
          "GetAllAuthorsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllAuthorsLambdaVersionWffsRnEZ6pCkh3P0uRPKL06KaABirCl3RhDZv4TU"
            }
          },
          "GetOneAuthorLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOneAuthorLambdaVersiony5FbNQymZF4TreUF7VaQMajNZC7Ti6i3OqOvVHki2nc"
            }
          },
          "CreateAuthorLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateAuthorLambdaVersiondlUNsTb9SBPjECFwFtwbR4hZwuXeGcvMTzoajGUZhd4"
            }
          },
          "UpdateAuthorLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateAuthorLambdaVersioncM1mZYi1EnOAxv1cyLshr50dictB8Jke2WB0Klos"
            }
          },
          "DeleteOneAuthorLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteOneAuthorLambdaVersionCfKzhGxQipK9jbklLEkSUaUX8hRphxMLptMIjtBe4"
            }
          },
          "GetFiltersPublicationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFiltersPublicationsLambdaVersionuTnHt6bzwKrgRsK6ktO0ZryEkwZt8uuDTTWFSTd2Sw"
            }
          },
          "GetAllPublicationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllPublicationsLambdaVersionn9NzTZKJLUM2QQ6jNCkJI98rU42GOjaSHxJwFkMNw0"
            }
          },
          "GetOnePublicationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOnePublicationLambdaVersionXYInSxq3Wy7VZZJHCBQtAWBEFFPTV11eFEDyEGsNg"
            }
          },
          "CreatePublicationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatePublicationLambdaVersionZPBDZSChr5Fq3zYluTlmbZ8A1Y19vjKnykFLfM4"
            }
          },
          "UpdatePublicationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdatePublicationLambdaVersiong6GlrxZ7QxGfV3mPeKaClgpF2VfPYAhQDVQnj5f55Uk"
            }
          },
          "DeleteOnePublicationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteOnePublicationLambdaVersionos2WbpaPbSA1z17UHNgaRdRqEC6YOMMmEwjv34EE"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "logs": {
        "restApi": {
          "format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourceId\":\"$context.resourceId\",\"resourcePath\":\"$context.resourcePath\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"status\":\"$context.status\",\"authLatency\":\"$context.authorizer.integrationLatency\",\"integrationLatency\":\"$context.integrationLatency\",\"integrationStatus\":\"$context.integrationStatus\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_ACCESS_LOG\",\"version\":\"1.0.0\"}"
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "getAllAuthors": {
        "handler": "s_getAllAuthors.handler",
        "events": [
          {
            "http": {
              "path": "authors",
              "method": "get",
              "cors": {
                "origin": "*",
                "headers": [
                  "*"
                ],
                "allowCredentials": true,
                "methods": [
                  "OPTIONS",
                  "GET"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sweatworks-dev-getAllAuthors",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetAllAuthorsLambdaVersionWffsRnEZ6pCkh3P0uRPKL06KaABirCl3RhDZv4TU"
      },
      "getOneAuthor": {
        "handler": "s_getOneAuthor.handler",
        "events": [
          {
            "http": {
              "path": "authors/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "headers": [
                  "*"
                ],
                "allowCredentials": true,
                "methods": [
                  "OPTIONS",
                  "GET"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sweatworks-dev-getOneAuthor",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetOneAuthorLambdaVersiony5FbNQymZF4TreUF7VaQMajNZC7Ti6i3OqOvVHki2nc"
      },
      "createAuthor": {
        "handler": "s_createAuthor.handler",
        "events": [
          {
            "http": {
              "path": "authors",
              "method": "post",
              "cors": {
                "origin": "*",
                "headers": [
                  "*"
                ],
                "allowCredentials": true,
                "methods": [
                  "OPTIONS",
                  "POST"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sweatworks-dev-createAuthor",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateAuthorLambdaVersiondlUNsTb9SBPjECFwFtwbR4hZwuXeGcvMTzoajGUZhd4"
      },
      "updateAuthor": {
        "handler": "s_updateAuthor.handler",
        "events": [
          {
            "http": {
              "path": "authors/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "headers": [
                  "*"
                ],
                "allowCredentials": true,
                "methods": [
                  "OPTIONS",
                  "PUT"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sweatworks-dev-updateAuthor",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateAuthorLambdaVersioncM1mZYi1EnOAxv1cyLshr50dictB8Jke2WB0Klos"
      },
      "deleteOneAuthor": {
        "handler": "s_deleteOneAuthor.handler",
        "events": [
          {
            "http": {
              "path": "authors/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "headers": [
                  "*"
                ],
                "allowCredentials": true,
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sweatworks-dev-deleteOneAuthor",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteOneAuthorLambdaVersionCfKzhGxQipK9jbklLEkSUaUX8hRphxMLptMIjtBe4"
      },
      "getFiltersPublications": {
        "handler": "s_getFiltersPublications.handler",
        "events": [
          {
            "http": {
              "path": "publications/filters",
              "method": "get",
              "cors": {
                "origin": "*",
                "headers": [
                  "*"
                ],
                "allowCredentials": true,
                "methods": [
                  "OPTIONS",
                  "GET"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sweatworks-dev-getFiltersPublications",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetFiltersPublicationsLambdaVersionuTnHt6bzwKrgRsK6ktO0ZryEkwZt8uuDTTWFSTd2Sw"
      },
      "getAllPublications": {
        "handler": "s_getAllPublications.handler",
        "events": [
          {
            "http": {
              "path": "publications",
              "method": "get",
              "cors": {
                "origin": "*",
                "headers": [
                  "*"
                ],
                "allowCredentials": true,
                "methods": [
                  "OPTIONS",
                  "GET"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sweatworks-dev-getAllPublications",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetAllPublicationsLambdaVersionn9NzTZKJLUM2QQ6jNCkJI98rU42GOjaSHxJwFkMNw0"
      },
      "getOnePublication": {
        "handler": "s_getOnePublication.handler",
        "events": [
          {
            "http": {
              "path": "publications/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "headers": [
                  "*"
                ],
                "allowCredentials": true,
                "methods": [
                  "OPTIONS",
                  "GET"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sweatworks-dev-getOnePublication",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetOnePublicationLambdaVersionXYInSxq3Wy7VZZJHCBQtAWBEFFPTV11eFEDyEGsNg"
      },
      "createPublication": {
        "handler": "s_createPublication.handler",
        "events": [
          {
            "http": {
              "path": "publications",
              "method": "post",
              "cors": {
                "origin": "*",
                "headers": [
                  "*"
                ],
                "allowCredentials": true,
                "methods": [
                  "OPTIONS",
                  "POST"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sweatworks-dev-createPublication",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreatePublicationLambdaVersionZPBDZSChr5Fq3zYluTlmbZ8A1Y19vjKnykFLfM4"
      },
      "updatePublication": {
        "handler": "s_updatePublication.handler",
        "events": [
          {
            "http": {
              "path": "publications/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "headers": [
                  "*"
                ],
                "allowCredentials": true,
                "methods": [
                  "OPTIONS",
                  "PUT"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sweatworks-dev-updatePublication",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdatePublicationLambdaVersiong6GlrxZ7QxGfV3mPeKaClgpF2VfPYAhQDVQnj5f55Uk"
      },
      "deleteOnePublication": {
        "handler": "s_deleteOnePublication.handler",
        "events": [
          {
            "http": {
              "path": "publications/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "headers": [
                  "*"
                ],
                "allowCredentials": true,
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sweatworks-dev-deleteOnePublication",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteOnePublicationLambdaVersionos2WbpaPbSA1z17UHNgaRdRqEC6YOMMmEwjv34EE"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "app": "sweatworks-app",
    "org": "pereirapy",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "app": "sweatworks-app",
      "org": "pereirapy",
      "frameworkVersion": "2",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": true,
    "isDashboardAppPreconfigured": true,
    "orgUid": "512d35c4-ed21-4f30-bad8-ed1d8cfa6a00",
    "appUid": "ZXPrHH8zncLfVLcKHB",
    "artifact": "/Users/pereira/Projetos/SweatWorks/be/.serverless/sweatworks.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/sweatworks/dev/1618498481834-2021-04-15T14:54:41.834Z",
    "artifact": "sweatworks.zip"
  }
}